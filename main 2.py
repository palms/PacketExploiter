'''
Created on Oct 16, 2014

@author: sundevuhl
'''


#! /usr/bin/python

import optparse, sys, socket, struct
import dpkt

class Detector(object):
    
    PROTECTION_ADDRS = {
        '\xC0\xA8\x00\x64': '\x7C\xD1\xC3\x94\x9E\xB8', # 192.168.0.100
        '\xC0\xA8\x00\x67': '\xD8\x96\x95\x01\xA5\xC9', # 192.168.0.103
        '\xC0\xA8\x00\x01': '\xF8\x1A\x67\xCD\x57\x6E', # 192.168.0.1
    }
    
    def __init__(self):
        format = "python %prog <pcap filename>"
        self.parser = optparse.OptionParser(usage = format)

    def arpSpoofing(self, arpData, pCount):
            if arpData.spa in self.PROTECTION_ADDRS:
                if arpData.sha != self.PROTECTION_ADDRS[arpData.spa]:
                    print 'ARP spoofing detected - offending address: %s, packet: %d' % (':'.join(val.encode('hex') for val in arpData.sha), (pCount + 1))
                    
    def portScanning(self):
        return
    
    def synFlooding(self):
        return
    
    def main(self, argv=None):
        
        options, args = self.parser.parse_args(sys.argv[1:])
        
        if len(args) != 1:
            self.parser.error("See usage")
            
        infile = open(args[0])
        pcapFile = dpkt.pcap.Reader(infile)
        
        for packetCount, (control, pcapData) in enumerate(pcapFile):
            testData = dpkt.ethernet.Ethernet(pcapData).data
            
            if type(testData) is dpkt.arp.ARP:
                self.arpSpoofing(testData, packetCount)
                
            elif type(testData) is dpkt.ip.IP:
                testData2 = testData.data

                #self.portScanning(testData2, testData, packetCount)
                    
                #if type(testData2) is dpkt.tcp.TCP:
                    #self.synFlooding(testData2, testData, control, packetCount)
                
        
        
        
        
        
        

if __name__ == '__main__':
    p = Detector()
    p.main()